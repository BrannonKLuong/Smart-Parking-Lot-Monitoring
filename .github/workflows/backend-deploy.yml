name: Deploy Backend to ECR and App Runner

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write       # for OIDC â†’ AWS
      contents: read        # to checkout the code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_TO_ASSUME }}
          aws-region:      ${{ secrets.AWS_REGION }}

      - name: Install/Update AWS CLI to latest v2
        run: |
          echo "Removing existing AWS CLI v1 if present..."
          sudo apt-get remove awscli -y || true
          echo "Installing/Updating AWS CLI v2..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          rm -rf awscliv2.zip aws/
          echo "AWS CLI Version: $(aws --version)"
          echo "AWS CLI Path: $(which aws)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create secrets directory for Firebase credentials
        run: mkdir -p backend/secrets

      - name: Create firebase-sa.json from secret
        run: echo '${{ secrets.FIREBASE_SA_JSON_CONTENT }}' > backend/secrets/firebase-sa.json
        env:
          FIREBASE_SA_JSON_CONTENT: ${{ secrets.FIREBASE_SA_JSON_CONTENT }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          IMAGE_TAG:      ${{ github.sha }}
        run: |
          echo "Building Docker image from ./backend"
          ls -la ./backend
          ls -la ./backend/secrets
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f backend/Dockerfile ./backend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                     $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to AWS App Runner
        if: success()
        env:
          APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
          IMAGE_URI:              ${{ steps.build-image.outputs.image_uri }}
        run: |
          # write the App Runner source configuration to disk
          cat <<EOF > source-config.json
          {
            "ImageRepository": {
              "ImageIdentifier": "${IMAGE_URI}",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": {
                "Port": "8000"
              }
            },
            "AutoDeploymentsEnabled": false
          }
          EOF

          # update the service (this triggers the new deployment)
          aws apprunner update-service \
            --service-arn "${APP_RUNNER_SERVICE_ARN}" \
            --source-configuration file://source-config.json

          echo "App Runner deployment initiated."
