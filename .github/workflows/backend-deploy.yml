# File: .github/workflows/backend-deploy.yml
name: Deploy Backend to ECR and App Runner

on:
  push:
    branches:
      - main # Or your primary deployment branch
    paths:
      - 'backend/**' # Only run if changes are in the backend directory
      - '.github/workflows/backend-deploy.yml' # Or on changes to this workflow file itself
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required to use OIDC for AWS authentication
      contents: read  # Required to checkout the code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install/Update AWS CLI to latest v2 and Verify
        id: install_aws_cli
        run: |
          echo "Current AWS CLI version (before update attempt):"
          aws --version || echo "AWS CLI v1 not found or 'aws' command not in PATH yet."
          echo "Removing existing AWS CLI v1 if present..."
          sudo apt-get remove awscli -y --allow-remove-essential || true 
          echo "Installing/Updating AWS CLI v2..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          rm -rf awscliv2.zip aws/
          echo "Verifying AWS CLI installation..."
          echo "AWS CLI Path: $(which aws)"
          echo "Updated AWS CLI Version:"
          aws --version
          echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create secrets directory for Firebase credentials
        run: mkdir -p backend/secrets

      - name: Create firebase-sa.json from secret
        run: echo '${{ secrets.FIREBASE_SA_JSON_CONTENT }}' > backend/secrets/firebase-sa.json
        env:
          FIREBASE_SA_JSON_CONTENT: ${{ secrets.FIREBASE_SA_JSON_CONTENT }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          IMAGE_TAG: ${{ github.sha }} # Use the commit SHA for a unique tag
        run: |
          echo "Building Docker image from context: ./backend"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile ./backend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to AWS App Runner using AWS CLI
        if: success() # Only run if previous steps succeeded
        env:
          APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
          IMAGE_URI: ${{ steps.build-image.outputs.image_uri }}
        run: |
          echo "Using AWS CLI at: $(which aws)"
          aws --version
          echo "Starting deployment to App Runner service: $APP_RUNNER_SERVICE_ARN with image $IMAGE_URI"
          
          CONFIG_FILE_PATH="${{ github.workspace }}/source-configuration.json"
          
          # Construct the JSON payload using jq for compact, single-line output.
          jq -c -n \
            --arg image_identifier "$IMAGE_URI" \
            '{
              "ImageRepository": {
                "ImageIdentifier": $image_identifier,
                "ImageRepositoryType": "ECR",
                "ImageConfiguration": { "Port": "8000" }
              },
              "AutoDeploymentsEnabled": false
            }' > "$CONFIG_FILE_PATH"
          
          echo "Using Source Configuration from file: $CONFIG_FILE_PATH"
          echo "File content:"
          cat "$CONFIG_FILE_PATH"
          echo "--- End of file content ---"

          # Try passing the file path for --source-configuration without any quotes around the file:// part
          # The shell will expand $CONFIG_FILE_PATH. This relies on the path not having spaces.
          aws apprunner start-deployment \
            --service-arn "$APP_RUNNER_SERVICE_ARN" \
            --source-configuration file://$CONFIG_FILE_PATH
            
          echo "App Runner deployment initiated."
