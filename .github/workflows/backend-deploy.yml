# File: .github/workflows/backend-deploy.yml
name: Deploy Backend to ECR and App Runner

on:
  push:
    branches:
      - main # Or your primary deployment branch
    paths:
      - 'backend/**' # Only run if changes are in the backend directory
      - '.github/workflows/backend-deploy.yml' # Or on changes to this workflow file itself
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    permissions: # Add this permissions block for OIDC
      id-token: write # Required to use OIDC for AWS authentication
      contents: read  # Required to checkout the code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          IMAGE_TAG: ${{ github.sha }} # Use the commit SHA for a unique tag
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile ./backend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to AWS App Runner using AWS CLI
        if: success() # Only run if previous steps succeeded
        env:
          APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
          IMAGE_URI: ${{ steps.build-image.outputs.image_uri }}
        run: |
          echo "Starting deployment to App Runner service: $APP_RUNNER_SERVICE_ARN with image $IMAGE_URI"
          aws apprunner start-deployment \
            --service-arn "$APP_RUNNER_SERVICE_ARN" \
            --source-configuration '{
                "ImageRepository": {
                    "ImageIdentifier": "'"$IMAGE_URI"'",
                    "ImageRepositoryType": "ECR",
                    "ImageConfiguration": { "Port": "8000" }
                },
                "AutoDeploymentsEnabled": false
            }'
          echo "App Runner deployment initiated."
          # Note: App Runner deployment happens asynchronously. 
          # To wait for completion, you would need a more complex script to poll deployment status.
          # For now, we just initiate it. The App Runner console will show progress.
