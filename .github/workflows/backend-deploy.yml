# .github/workflows/backend-deploy.yml
name: Deploy Backend to AWS App Runner & ECR (HTTP Streaming Focus)

on:
  push:
    branches:
      - main # Or your primary deployment branch
    paths: # Trigger if backend, this workflow, or key assets change
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'yolov8n.pt' 
      - 'ui/build/**' # Trigger if UI build changes, as it might be bundled
  workflow_dispatch: # Allows manual triggering

permissions:
  id-token: write # Required for OIDC to AWS
  contents: read  # Required to checkout the code

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }} 
      APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
      RDS_DATABASE_URL: ${{ secrets.RDS_DATABASE_URL }} 
      # FIREBASE_SA_JSON_CONTENT is accessed directly in the python script step below

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # If you use Git LFS for large files like yolov8n.pt or videos:
        # with:
        #   lfs: true

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_TO_ASSUME }} 
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python for Alembic and Firebase script
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Match your application's Python version

      - name: Install Alembic, DB driver, and necessary packages for scripts
        run: |
          python -m pip install --upgrade pip
          pip install alembic psycopg2-binary python-dotenv sqlalchemy sqlmodel
        working-directory: ./backend 

      - name: Remove local .env if it exists (to ensure CI uses RDS_DATABASE_URL)
        run: |
          if [ -f ./backend/.env ]; then
            echo "Removing local backend/.env file to prevent conflict with CI DATABASE_URL."
            rm ./backend/.env
          else
            echo "No local backend/.env file found, proceeding."
          fi

      - name: Run Alembic Migrations
        shell: bash
        working-directory: ./backend 
        env:
          DATABASE_URL: ${{ env.RDS_DATABASE_URL }} 
          PYTHONUNBUFFERED: "1" 
        run: |
          echo "Running Alembic migrations..."
          echo "Target DATABASE_URL (from workflow env): $DATABASE_URL"
          alembic upgrade head

      - name: Create firebase-sa.json from secret using Python
        shell: python
        run: |
          import os
          import json 
          
          firebase_secret_content = os.environ.get('FIREBASE_SECRET_CONTENT_FOR_FILE')
          
          if not firebase_secret_content:
            print("::error::GitHub Secret FIREBASE_SA_JSON_CONTENT is not set or empty!")
            exit(1)
          
          # Path for the Docker build context (./backend)
          secrets_dir_in_context = os.path.join(".", "backend", "secrets")
          os.makedirs(secrets_dir_in_context, exist_ok=True)
          file_path_in_context = os.path.join(secrets_dir_in_context, "firebase-sa.json")
          
          try:
            json.loads(firebase_secret_content) 
            print("Firebase secret content appears to be valid JSON (validated by Python script).")
            
            with open(file_path_in_context, 'w', encoding='utf-8') as f:
              f.write(firebase_secret_content)
            print(f"Successfully wrote FIREBASE_SA_JSON_CONTENT to {file_path_in_context}")

          except json.JSONDecodeError as e_json:
            print(f"::error::The content of FIREBASE_SA_JSON_CONTENT secret is NOT valid JSON: {e_json}")
            print(f"Problematic secret starts with (first 200 chars): {firebase_secret_content[:200]}...") 
            exit(1)
          except Exception as e:
            print(f"::error::Failed to write Firebase secret to file at {file_path_in_context}: {e}")
            exit(1)
        env:
          FIREBASE_SECRET_CONTENT_FOR_FILE: ${{ secrets.FIREBASE_SA_JSON_CONTENT }}

      - name: Prepare frontend build for backend Docker image (Optional)
        # This step assumes your 'npm run build' (from frontend-deploy.yml or a similar process)
        # outputs to './ui/build/'. It copies these assets into the backend's Docker build context.
        # Your Dockerfile then needs to COPY from 'frontend_build_source_for_docker'
        # to '/app/frontend_build'.
        run: |
          echo "Preparing frontend build for Docker context..."
          UI_BUILD_SOURCE_PATH="./ui/build" # Adjust if your React build output is elsewhere (e.g. "./static")
          DOCKER_CONTEXT_UI_TARGET="./backend/frontend_build_source_for_docker"

          if [ -d "$UI_BUILD_SOURCE_PATH" ] && [ "$(ls -A $UI_BUILD_SOURCE_PATH)" ]; then
            echo "Copying frontend build from $UI_BUILD_SOURCE_PATH to $DOCKER_CONTEXT_UI_TARGET/"
            mkdir -p "$DOCKER_CONTEXT_UI_TARGET"
            cp -R $UI_BUILD_SOURCE_PATH/* "$DOCKER_CONTEXT_UI_TARGET/"
            echo "Frontend build files copied into Docker context."
          else
            echo "::warning::Frontend build directory $UI_BUILD_SOURCE_PATH is empty or does not exist. SPA serving from backend might fail if configured."
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to ECR
        id: build-image 
        uses: docker/build-push-action@v5
        with:
          context: ./backend 
          # Dockerfile is backend/Dockerfile relative to context
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update App Runner Service
        run: |
          echo "Updating App Runner service ${{ env.APP_RUNNER_SERVICE_ARN }} with image ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          aws apprunner update-service \
            --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }} \
            --source-configuration '{
                "ImageRepository": {
                    "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
                    "ImageRepositoryType": "ECR",
                    "ImageConfiguration": { "Port": "8000" }
                },
                "AutoDeploymentsEnabled": false 
            }' \
            --region ${{ env.AWS_REGION }}
          echo "App Runner service update command issued."
#