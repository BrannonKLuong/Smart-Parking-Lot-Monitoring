# .github/workflows/backend-deploy.yml
name: Deploy Backend to AWS App Runner & ECR

on:
  push:
    branches:
      - main # Or your deployment branch
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch: # Allows manual triggering

permissions:
  id-token: write # Required for OIDC
  contents: read  # Required to checkout the code

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }} # e.g., smart-parking-backend
      APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
      RDS_DATABASE_URL: ${{ secrets.RDS_DATABASE_URL }} 
      # This is the connection string for your RDS instance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_TO_ASSUME }} 
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python for Alembic
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' 

      - name: Install Alembic and DB driver
        run: |
          python -m pip install --upgrade pip
          # Ensure all dependencies needed by alembic/env.py are installed
          # This might include your app's dependencies if env.py imports from your app
          # For example, if env.py imports from app.db which uses sqlmodel:
          pip install alembic psycopg2-binary python-dotenv sqlalchemy sqlmodel
        working-directory: ./backend 

      - name: Remove local .env to ensure CI uses RDS_DATABASE_URL
        # This step prevents a local backend/.env file (if committed) from overriding the DATABASE_URL set for CI.
        run: |
          if [ -f ./backend/.env ]; then
            echo "Removing local backend/.env file to prevent conflict with CI DATABASE_URL."
            rm ./backend/.env
          else
            echo "No local backend/.env file found, proceeding."
          fi

      - name: Run Alembic Migrations
        shell: bash
        run: |
          echo "Running Alembic migrations..."
          echo "Target DATABASE_URL (from workflow env): ${{ env.RDS_DATABASE_URL }}"
          # The DATABASE_URL for alembic will be taken from the environment variable set by the 'env' key of this step.
          # Your alembic/env.py should be configured to pick up os.environ.get('DATABASE_URL').
          alembic upgrade head
        working-directory: ./backend # This is where alembic.ini should be
        env:
          DATABASE_URL: ${{ env.RDS_DATABASE_URL }} # Explicitly set for this step
          PYTHONUNBUFFERED: "1" # Often useful for CI logging

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create firebase-sa.json from secret for Docker build
        run: |
          mkdir -p ./backend/secrets
          echo "${{ secrets.FIREBASE_SA_JSON_CONTENT }}" > ./backend/secrets/firebase-sa.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ./backend 
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update App Runner Service
        run: |
          aws apprunner update-service \
            --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }} \
            --source-configuration '{
                "ImageRepository": {
                    "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
                    "ImageRepositoryType": "ECR",
                    "ImageConfiguration": { "Port": "8000" }
                },
                "AuthenticationConfiguration": {
                     "AccessRoleArn": "${{ secrets.APP_RUNNER_ECR_ACCESS_ROLE_ARN }}" 
                },
                "AutoDeploymentsEnabled": false
            }' \
            --region ${{ env.AWS_REGION }}
        # Note: AutoDeploymentsEnabled is now inside the --source-configuration JSON.
        # If you do not need to specify AuthenticationConfiguration (e.g., App Runner service
        # already has an ECR access role configured and it's picked up automatically),
        # you can remove the "AuthenticationConfiguration" block from the JSON above.
        # Ensure the JSON is valid (e.g., no trailing comma after ImageRepository if AuthConfig is removed,
        # and also no trailing comma after AuthenticationConfiguration if AutoDeploymentsEnabled is the last item).

