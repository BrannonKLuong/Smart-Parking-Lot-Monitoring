# File: .github/workflows/backend-deploy.yml
name: Deploy Backend to ECR and App Runner

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write # Required to push to GitHub Packages (ECR in this case)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Match your Dockerfile's Python version

      - name: Cache Pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # Path to pip cache directory
          # Key for the cache: OS, Python version, and hash of requirements.txt
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install/Update AWS CLI to latest v2 and Verify
        run: |
          echo "Current AWS CLI version (before update attempt):"
          aws --version || echo "AWS CLI v1 not found or 'aws' command not in PATH yet."
          echo "Removing existing AWS CLI v1 if present..."
          sudo apt-get remove awscli -y --allow-remove-essential || true 
          echo "Installing/Updating AWS CLI v2..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          rm -rf awscliv2.zip aws/
          echo "Verifying AWS CLI installation..."
          echo "AWS CLI Path: $(which aws)"
          echo "Updated AWS CLI Version:"
          aws --version
          echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create secrets directory for Firebase credentials
        run: mkdir -p backend/secrets

      - name: Create firebase-sa.json from secret
        run: echo '${{ secrets.FIREBASE_SA_JSON_CONTENT }}' > backend/secrets/firebase-sa.json
        env:
          FIREBASE_SA_JSON_CONTENT: ${{ secrets.FIREBASE_SA_JSON_CONTENT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to ECR
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: ./backend # Build context is the backend directory
          file: ./backend/Dockerfile # Path to your Dockerfile
          push: true # Push to ECR
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:latest
          cache-from: type=gha # Enable GitHub Actions cache for Docker layers
          cache-to: type=gha,mode=max # Export cache to GitHub Actions cache

      - name: Update App Runner Service to use new image
        if: success()
        env:
          APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
          # Use the ECR URI with the commit SHA tag for precise deployment
          IMAGE_URI: "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}"
        run: |
          echo "Using AWS CLI at: $(which aws)"
          aws --version
          echo "Updating App Runner service: $APP_RUNNER_SERVICE_ARN to use image $IMAGE_URI"
          
          CONFIG_FILE_PATH="${{ github.workspace }}/source-configuration-for-update.json"
          
          jq -c -n \
            --arg image_identifier "$IMAGE_URI" \
            '{
              "ImageRepository": {
                "ImageIdentifier": $image_identifier,
                "ImageRepositoryType": "ECR",
                "ImageConfiguration": { "Port": "8000" }
              }
            }' > "$CONFIG_FILE_PATH"
          
          echo "Using Source Configuration for update-service from file: $CONFIG_FILE_PATH"
          cat "$CONFIG_FILE_PATH"
          echo "--- End of file content ---"

          aws apprunner update-service \
            --service-arn "$APP_RUNNER_SERVICE_ARN" \
            --source-configuration "file://$CONFIG_FILE_PATH"
            
          echo "App Runner service update initiated. This should trigger a new deployment."
