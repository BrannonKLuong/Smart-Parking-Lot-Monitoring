services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s 

  backend:
    build:
      context: . 
      dockerfile: backend/Dockerfile 
    depends_on:
      db: 
        condition: service_healthy 
    environment:
      # --- Critical for merged functionality ---
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      FIREBASE_CRED_PATH: /app/secrets/firebase-sa.json # Path inside the container
      VIDEO_SOURCE_TYPE: "WEBSOCKET_STREAM" # Default for UI webcam streaming
      
      # --- Optional, but good to set based on your main.py defaults or for other modes ---
      VIDEO_SOURCE: /app/videos/test_video.mov # Used if VIDEO_SOURCE_TYPE=FILE
      VIDEO_PROCESSING_FPS: "15" 
      FCM_VACANCY_DELAY_SECONDS: "5"
      # AWS_REGION: "your-aws-region" # If using KVS
      # MODEL_PATH: "/app/yolov8n.pt" # If cv_model.py uses this env var

      # --- Standard good practices ---
      PYTHONUNBUFFERED: "1" 
      LOG_LEVEL: "debug" # As set in your docker-compose
      # Ensure your main.py's logging.basicConfig also respects LOG_LEVEL if desired
      
    ports:
      - "8000:8000"
    # volumes: # Keep commented for testing the image build, uncomment for dev if needed
    #   - ./backend:/app # This would map your local backend to /app in container

volumes:
  pgdata: